// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// ffi interface for rustbrains libgbrainy implementation
class Librustybrain {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Librustybrain(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Librustybrain.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// # Safety
  ///
  /// This should be called before any other ffi functions are invoked
  bool engine_init_game_manager() {
    return _engine_init_game_manager() != 0;
  }

  late final _engine_init_game_managerPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'engine_init_game_manager');
  late final _engine_init_game_manager =
      _engine_init_game_managerPtr.asFunction<int Function()>();

  /// # Safety
  ///
  /// Never call before initializing with engine_init_game_manager
  int engine_get_games_count() {
    return _engine_get_games_count();
  }

  late final _engine_get_games_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>(
          'engine_get_games_count');
  late final _engine_get_games_count =
      _engine_get_games_countPtr.asFunction<int Function()>();

  /// # Safety
  ///
  /// Never call before initializing with engine_init_game_manager
  ffi.Pointer<GameContext> engine_context_new() {
    return _engine_context_new();
  }

  late final _engine_context_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GameContext> Function()>>(
          'engine_context_new');
  late final _engine_context_new =
      _engine_context_newPtr.asFunction<ffi.Pointer<GameContext> Function()>();

  /// Get a random game from [ category ]
  /// # Safety
  ///
  /// Never call before initializing with engine_init_game_manager
  ffi.Pointer<GameContext> engine_context_new_by_category(
    ffi.Pointer<ffi.Int8> category,
  ) {
    return _engine_context_new_by_category(
      category,
    );
  }

  late final _engine_context_new_by_categoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GameContext> Function(
              ffi.Pointer<ffi.Int8>)>>('engine_context_new_by_category');
  late final _engine_context_new_by_category =
      _engine_context_new_by_categoryPtr.asFunction<
          ffi.Pointer<GameContext> Function(ffi.Pointer<ffi.Int8>)>();

  /// # Safety
  ///
  /// Always make sure that GameContext ptr is always valid before passing
  ffi.Pointer<ffi.Int8> engine_context_get_question(
    ffi.Pointer<GameContext> ptr,
  ) {
    return _engine_context_get_question(
      ptr,
    );
  }

  late final _engine_context_get_questionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<GameContext>)>>('engine_context_get_question');
  late final _engine_context_get_question = _engine_context_get_questionPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<GameContext>)>();

  /// # Safety
  ///
  /// Always make sure that GameContext ptr is always valid before passing
  ffi.Pointer<ffi.Int8> engine_context_get_rationale(
    ffi.Pointer<GameContext> ptr,
  ) {
    return _engine_context_get_rationale(
      ptr,
    );
  }

  late final _engine_context_get_rationalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<GameContext>)>>('engine_context_get_rationale');
  late final _engine_context_get_rationale = _engine_context_get_rationalePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<GameContext>)>();

  /// # Safety
  ///
  /// Always make sure that GameContext ptr is always valid before passing
  ffi.Pointer<ffi.Int8> engine_context_get_name(
    ffi.Pointer<GameContext> ptr,
  ) {
    return _engine_context_get_name(
      ptr,
    );
  }

  late final _engine_context_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<GameContext>)>>('engine_context_get_name');
  late final _engine_context_get_name = _engine_context_get_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<GameContext>)>();

  /// # Safety
  ///
  /// Always make sure that GameContext ptr is always valid before passing
  ffi.Pointer<ffi.Int8> engine_context_get_drawables(
    ffi.Pointer<GameContext> ptr,
  ) {
    return _engine_context_get_drawables(
      ptr,
    );
  }

  late final _engine_context_get_drawablesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<GameContext>)>>('engine_context_get_drawables');
  late final _engine_context_get_drawables = _engine_context_get_drawablesPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<GameContext>)>();

  /// # Safety
  ///
  /// Always make sure that GameContext ptr is always valid before passing
  ffi.Pointer<ffi.Int8> engine_context_get_image(
    ffi.Pointer<GameContext> ptr,
  ) {
    return _engine_context_get_image(
      ptr,
    );
  }

  late final _engine_context_get_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<GameContext>)>>('engine_context_get_image');
  late final _engine_context_get_image = _engine_context_get_imagePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<GameContext>)>();

  /// # Safety
  ///
  /// Always make sure that GameContext ptr is always valid before passing
  ffi.Pointer<ffi.Int8> engine_context_get_possible_answers(
    ffi.Pointer<GameContext> ptr,
  ) {
    return _engine_context_get_possible_answers(
      ptr,
    );
  }

  late final _engine_context_get_possible_answersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(ffi.Pointer<GameContext>)>>(
      'engine_context_get_possible_answers');
  late final _engine_context_get_possible_answers =
      _engine_context_get_possible_answersPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<GameContext>)>();

  /// # Safety
  ///
  /// Always make sure that GameContext ptr is always valid before passing
  bool engine_context_check_answer(
    ffi.Pointer<GameContext> ptr,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _engine_context_check_answer(
          ptr,
          s,
        ) !=
        0;
  }

  late final _engine_context_check_answerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<GameContext>,
              ffi.Pointer<ffi.Int8>)>>('engine_context_check_answer');
  late final _engine_context_check_answer =
      _engine_context_check_answerPtr.asFunction<
          int Function(ffi.Pointer<GameContext>, ffi.Pointer<ffi.Int8>)>();

  /// # Safety
  ///
  /// Always make sure that GameContext ptr is always valid before passing
  ffi.Pointer<ffi.Int8> engine_context_get_option_prefix(
    ffi.Pointer<GameContext> ptr,
    int index,
    ffi.Pointer<ffi.Int8> content,
  ) {
    return _engine_context_get_option_prefix(
      ptr,
      index,
      content,
    );
  }

  late final _engine_context_get_option_prefixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<GameContext>, ffi.Uint8,
              ffi.Pointer<ffi.Int8>)>>('engine_context_get_option_prefix');
  late final _engine_context_get_option_prefix =
      _engine_context_get_option_prefixPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<GameContext>, int, ffi.Pointer<ffi.Int8>)>();

  /// # Safety
  ///
  /// This should always be called after consuming any rust strings
  void engine_free_string(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _engine_free_string(
      s,
    );
  }

  late final _engine_free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'engine_free_string');
  late final _engine_free_string =
      _engine_free_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();
}

class GameContext extends ffi.Opaque {}
